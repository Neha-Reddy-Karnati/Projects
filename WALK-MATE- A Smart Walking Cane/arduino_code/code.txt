#include <Adafruit_GPS.h>
#include <SoftwareSerial.h>
SoftwareSerial mySerial(9,10); // RX, TX
#define GPSSerial Serial
#define GPSECHO false
uint32_t timer = millis();
Adafruit_GPS GPS(&GPSSerial);
const int trigPin = 2;
const int echoPin = 3;
const int key=4;
const int ldr=5;
const int pit=6;
const int led=13;
const int buzz=11;
const int inp=7;
long duration;
int distance;
char x=0; 
int i=0;
void setup() 
{
  Serial.begin(9600);
  mySerial.begin(9600);  
 
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input  
  pinMode(key,INPUT);  
  pinMode(ldr,INPUT); 
  pinMode(pit,INPUT); 
  pinMode(inp,INPUT);       
  pinMode(buzz, OUTPUT);    
  pinMode(led, OUTPUT);    
  Serial.println("WELCOME");
  GPS.begin(9600);
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ); // 1 Hz update rate
  GPS.sendCommand(PGCMD_ANTENNA);
  delay(1000);
  GPSSerial.println(PMTK_Q_RELEASE);
  delay(500);
  digitalWrite(key, HIGH);
  digitalWrite(buzz, LOW);  
  digitalWrite(led, LOW);    
}
void loop() 
{
  ultra();  
  if(distance<30)
  {
  Serial.println("OBSTACLE");    
  digitalWrite(buzz,HIGH);   
  delay(100);
  digitalWrite(buzz,LOW); 
  delay(100);      
  }

   if(digitalRead(ldr)==HIGH)
    {
    digitalWrite(led,HIGH);      
    }
    else
    {
    digitalWrite(led,LOW);      
    }
    
    if(digitalRead(pit)==HIGH)
    {    
    digitalWrite(buzz,HIGH);   
    delay(200);
    digitalWrite(buzz,LOW); 
    delay(200);   
    }
  if(digitalRead(inp)==HIGH)
  {
     digitalWrite(buzz,HIGH);  
     delay(2000); 
      digitalWrite(buzz,LOW);           
  }


 
  if(digitalRead(key)==LOW)
  {
    Serial.print("emergency");       
    gps();
    delay(100); 
    gps();
    delay(100); 
    mySerial.begin(9600);    
    mySerial.print("AT+CMGF=1\n\r");
    delay(1000);
    mySerial.print("AT+CMGS="); // send the SMS number
    mySerial.print('"');
    mySerial.print("+919381904361");
    mySerial.println('"');
    delay(1000);  
    mySerial.print("ALERT PLS,EMERGENCY NEEDED AT LOCATION: https://www.google.co.in/maps/place/");    
    mySerial.print(GPS.latitudeDegrees,5);
    mySerial.print(",");
    mySerial.print(GPS.longitudeDegrees,5); 
    delay(500);
    mySerial.write(0x1A);
    mySerial.write(0x0D);
    mySerial.write(0x0A);  
    delay(3000);   

    
  }
}
void gps()
 {
  GPS.begin(9600);
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ); // 1 Hz update rate
  GPS.sendCommand(PGCMD_ANTENNA);
  delay(1000);
  GPSSerial.println(PMTK_Q_RELEASE);    
 again:

  char c = GPS.read();
  if (GPSECHO)
  if (c) Serial.print(c);
  if (GPS.newNMEAreceived()) {
  //  Serial.println(GPS.lastNMEA()); // this also sets the newNMEAreceived() flag to false
    if (!GPS.parse(GPS.lastNMEA())) // this also sets the newNMEAreceived() flag to false
     goto again; // we can fail to parse a sentence in which case we should just wait for another
  }
  else
  {
    goto again;
  }
  if (timer > millis()) timer = millis();
  if (millis() - timer > 2000) {
    timer = millis(); // reset the timer
 
    if (GPS.fix) {
      Serial.print("Location: ");
      Serial.print(GPS.latitude, 4); Serial.print(GPS.lat);
      Serial.print(", ");
      Serial.print(GPS.longitude, 4); Serial.println(GPS.lon);
      delay(500);
      }
    else
    {
    Serial.print("gps not initilized ");
 
    goto again;
    }
 }
}

void ultra()
{
delay(100);  
digitalWrite(trigPin, LOW);
delayMicroseconds(2);
// Sets the trigPin on HIGH state for 10 micro seconds
digitalWrite(trigPin, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin, LOW);
// Reads the echoPin, returns the sound wave travel time in microseconds
duration = pulseIn(echoPin, HIGH);
// Calculating the distance
distance= duration*0.034/2;
// Prints the distance on the Serial Monitor
Serial.println(distance);  

}